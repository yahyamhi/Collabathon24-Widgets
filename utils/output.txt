File: C:\Workspace\Collabathon24-Widgets\backend\config\apiConfig.js


const config = require('./config'); 

const apiConfig = {
  headers: {
    keyid: config.apiKey,
    secret: config.apiSecret,
    'Content-Type': 'application/json',
  },
  baseUrl: process.env.BASE_URL_SANDBOX,
};

const dotenv = require('dotenv');
dotenv.config();

module.exports = apiConfig;

--------------------------------------------------
File: C:\Workspace\Collabathon24-Widgets\backend\data\taxComplianceData.json
{
    "taxObligations": [
      { "id": "TAX001", "type": "VAT Return", "dueDate": "2024-11-01", "amount": "15000", "status": "Pending" },
      { "id": "TAX002", "type": "Corporate Tax Filing", "dueDate": "2024-12-15", "amount": "50000", "status": "Pending" },
      { "id": "TAX003", "type": "Quarterly Tax Return", "dueDate": "2024-10-30", "amount": "25000", "status": "Filed" },
      { "id": "TAX004", "type": "Annual Tax Return", "dueDate": "2025-01-31", "amount": "100000", "status": "Pending" }
    ]
  }
  
--------------------------------------------------
File: C:\Workspace\Collabathon24-Widgets\backend\routes\apiRoutes.js
const express = require('express');
const branchController = require('../controller/branchController');
const exchangeController = require('../controller/exchangeController');
const accountController = require('../controller/accountController');
const cashFlowController = require('../controller/cashFlowController'); // Import the controller
const transferController = require('../controller/transferController'); // Or use transferController if created
const supplierPaymentController = require('../controller/supplierPaymentController');
const taxComplianceService = require('../services/taxComplianceService');


const router = express.Router();

// Branch finder routes
router.get('/branches', branchController.getBranches);

// Currency exchange routes
router.get('/currencies', exchangeController.getSupportedCurrencies); // Get supported currencies from local JSON
router.get('/exchange-rate', exchangeController.getLatestExchangeRates); // Get latest exchange rates dynamically
router.get('/convert-currency', exchangeController.convertCurrency); // Convert currency using the external API
// Add the route for account summary
router.get('/account-summary/:accountId', accountController.getAccountSummary);
router.get('/account-ids', accountController.getAccountIds);
router.get('/cash-flow', cashFlowController.getCashFlowData);
router.get('/account-balances', transferController.getAccountBalances);
router.post('/quick-transfer', transferController.quickTransfer);
// Supplier Payment Tracker routes
router.get('/supplier-payments', supplierPaymentController.getSupplierPayments);
router.get('/supplier-payments/:supplierId', supplierPaymentController.getSupplierPaymentById);

// Tax compliance data route
router.get('/tax-compliance', async (req, res) => {
  try {
    const taxData = await taxComplianceService.getTaxComplianceData();
    res.json(taxData);
  } catch (error) {
    res.status(500).json({ error: 'Unable to fetch tax compliance data' });
  }
});

module.exports = router;

--------------------------------------------------
File: C:\Workspace\Collabathon24-Widgets\backend\services\taxComplianceService.js
const fs = require('fs');
const path = require('path');

const dataPath = path.resolve(__dirname, '../data/taxComplianceData.json');

const taxComplianceService = {
  getTaxComplianceData: () => {
    return new Promise((resolve, reject) => {
      fs.readFile(dataPath, 'utf8', (err, data) => {
        if (err) {
          reject('Unable to read tax compliance data');
        } else {
          resolve(JSON.parse(data));
        }
      });
    });
  }
};

module.exports = taxComplianceService;

--------------------------------------------------
File: C:\Workspace\Collabathon24-Widgets\frontend\src\components\Dashboard.js
Could not read file: C:\Workspace\Collabathon24-Widgets\frontend\src\components\Dashboard.js. Error: 'charmap' codec can't encode characters in position 3149-3150: character maps to <undefined>
--------------------------------------------------
File: C:\Workspace\Collabathon24-Widgets\frontend\src\components\TaxComplianceOverviewWidget.css
.tax-compliance-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    border: 2px solid #000;
    table-layout: fixed;
  }
  
  .tax-compliance-table th,
  .tax-compliance-table td {
    padding: 12px;
    border: 1px solid #000;
    font-size: 14px;
    text-align: left;
    word-wrap: break-word;
  }
  
  .tax-compliance-table th {
    background-color: #e9f5ff;
    font-weight: bold;
    color: #003366;
  }
  
  .tax-compliance-table tr:nth-child(even) {
    background-color: #f2f2f2;
  }
  
  .tax-compliance-table td {
    color: #333;
  }
  
--------------------------------------------------
File: C:\Workspace\Collabathon24-Widgets\frontend\src\components\TaxComplianceOverviewWidget.js
import React, { useState, useEffect } from 'react';
import './TaxComplianceOverviewWidget.css';

const TaxComplianceOverviewWidget = () => {
  const [taxData, setTaxData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch tax compliance data from the API
  useEffect(() => {
    fetch('/api/tax-compliance')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to fetch tax data');
        }
        return response.json();
      })
      .then((data) => {
        setTaxData(data.taxObligations);
        setLoading(false);
      })
      .catch((error) => {
        setError(error.message);
        setLoading(false);
      });
  }, []);

  return (
    <div>
      <h3>Tax Compliance Overview</h3>
      {loading ? (
        <p>Loading tax compliance data...</p>
      ) : error ? (
        <p>Error: {error}</p>
      ) : (
        <table className="tax-compliance-table">
          <thead>
            <tr>
              <th>Type</th>
              <th>Due Date</th>
              <th>Amount (EUR)</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            {taxData.map((tax) => (
              <tr key={tax.id}>
                <td>{tax.type}</td>
                <td>{tax.dueDate}</td>
                <td>{tax.amount}</td>
                <td>{tax.status}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default TaxComplianceOverviewWidget;

--------------------------------------------------
